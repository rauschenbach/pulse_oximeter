
/*
 * ѕри открытии порта первой идет 4 байта команды open: 1 байт  единица и три байта 0,
 * далее 8 байт структуры port_param_struct. 
 * ѕри успешном открытии порта присылаетс€ в ответ 0, ошибка - меньше нул€.
 *
 * ѕри закрытии порта первой идет 4 байта команды close: 1 байт двойка и три байта 0,
 * ответ - 0 - успех, отрицательное значение - ошибка.
 *
 * ѕри записи в порт первой идет 4 байта команды write: 1 байт тройка и три байта 0,
 * далее буфер передачи buf. —оответсвенно длина всей передачи будет buflen + 4 байта команды.
 * ѕри успешной записи в порт возвращаетс€ длина посылки buflen (без 4 байтов команды)
 *
 * ѕри чтении из порта первой идет 4 байта команды read: 1 байт четверка и три байта 0,
 * далее число байт, которые нужно прочитать
 * ѕри успешном чтении из порта возвращаетс€ длина прочитанных байт
 * 
 * »ли на чтение посылаете и пустой буфер, дополително к команде, € вычисл€ю размер буфера,
 * что вы хотите получить и высылаю данные.
 */

#ifndef _COMPORT_H
#define _COMPORT_H


#include "globdefs.h"


/*  оманды работы с портом */
typedef enum {
    cmd_open = 1,
    cmd_close,
    cmd_write,
    cmd_read,
    cmd_rsvd = 0x12345678, /* –азмер 4 байта */
} port_cmd_enum;


/* Ѕит данных */
typedef enum {
  datab_5,
  datab_6,
  datab_7,
  datab_8,
} port_datab_enum;

/* ѕаритет */
typedef enum {
    par_none,
    par_even,
    par_mark,
    par_odd,
    par_space,
} port_par_enum;

/* „исло стопбитов  */
typedef enum {
    stopb_1,
    stopb_15,
    stopb_2, 
} port_stopb_enum;

/* в gcc99 не сделать размер enum в 1 байт, поэтому в структуре делаем битовые пол€ */

/*  оманда открыти€ порта - 8 байт */
typedef struct {
    port_datab_enum bits : 8;
    port_par_enum : 8;
    port_stopb_enum : 8;
    u8 rsvd;
    int baud_rate; /*—корость - числовое значение */        
} port_param_struct;


#endif		/* comport.h  */
